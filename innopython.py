'''Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.'''

import os, sys
from ctypes import *

if sys.platform == 'win32':
	STD_OUTPUT_HANDLE= -11
	handle = windll.Kernel32.GetStdHandle(STD_OUTPUT_HANDLE)

def __set_color_win32(color=0):
	windll.Kernel32.SetConsoleTextAttribute(handle, color)

__win32_color_blue = 9
__color_blue = '\\033[36m'
__win32_color_reset = 7
__color_reset = '\\033[0m'
__win32_color_red = 12
__color_red = '\\033[31m'

def __win32_notice(alert, text, color):
	__set_color_win32(color)
	print (alert + ':'),
	__set_color_win32(__win32_color_reset)
	print text

def __notice(alert, text, color):
	print (color + alert + ': ' + __color_reset), text

def note(text):
	if sys.platform == 'win32':
		__win32_notice('note', text, __win32_color_blue)
	else:
		print __notice('note', text, __color_blue)

def err(text):
	if sys.platform == 'win32':
		__win32_notice('error', text, __win32_color_red)
	else:
		print __notice('error', text, __color_red)
	sys.exit(1)

class setup():
	def __init__(self):
		self.appname = None
		self.appdir = None
		self.files = {}
		self.pyver = 2.7
		self.appver = 0
		self.setupdestdir = os.getcwd()
		self.scriptdestdir = os.getcwd()
		self.setupname = None
		self.license = None
	def build(self):
		newl = '\n'
		print 'InnoPython 0.1'
		if self.appname == None:
			self.appname = 'setup1'
			note('appname has not been defined; defaulting to setup1')
		self.scriptname = self.appname + '-' + str(self.appver) + '-python' + str(self.pyver)
		if self.setupname == None:
			self.setupname = self.appname + '-' + str(self.appver) + '-python' + str(self.pyver)
			note('setupname has not been defined; defaulting to ' + self.setupname)
		if self.appdir == None:
			err('appdir has not been defined')
		print 'Generating', self.scriptname, 'in', self.scriptdestdir + '...'
		script = open(self.scriptdestdir + '\\' + self.scriptname + '.iss', 'w')
		script.write('')
		script.close()
		script = open(self.scriptdestdir + '\\' + self.scriptname + '.iss', 'a')
		print 'Writing preprocessor definitions...'
		script.write('#define AppName "' + self.appname + '"\n')
		script.write('#define AppDir "\\' + self.appdir + '"\n')
		script.write('#define PyVer "' + str(self.pyver) + '"\n')
		script.write('#define AppVer "' + str(self.appver) + '"\n')
		print 'Writing setup section'
		script.write('[Setup]\nAppName={#AppName}\n')
		script.write('AppVersion={#AppVer}\n')
		script.write('AppVerName={#AppName} {#AppVer}\n')
		script.write('DefaultDirName={code:GetDirName}\n')
		script.write('DisableProgramGroupPage=yes\n')
		if self.license:
			script.write('LicenseFile=' + self.license + newl)
		script.write('OutputDir=' + self.setupdestdir + newl)
		script.write('OutputBaseFilename={#AppDir}-{#AppVer}-python-{#PyVer}\nCompression=lzma\nSolidCompression=yes')
		print 'Writing languages section...'
		script.write('\n[Languages]\nName: "english"; MessagesFile: "compiler:Default.isl"\n')
		print 'Writing files section...'
		script.write('[Files]\n')
		for key in self.files:
			script.write('Source: "' + key + '"; DestDir: ' + self.files[key] + '; Flags: ignoreversion\n')
		print 'Writing code section...'
		code = '''[Code]
procedure ExitProcess(exitCode:integer);
  external 'ExitProcess@kernel32.dll stdcall';

function GetDirName(Value: string): string;
var		  
  InstallPath: string;
  reg1 : string;
  reg2 : string;
begin
  reg1 := 'SOFTWARE\\Python\\PythonCore\\' + '{#PyVer}' + '\\InstallPath';
  reg2 := 'SOFTWARE\\Python\\PythonCore\\Wow6432Node\\' + '{#PyVer}' + '\\InstallPath';
  if RegQueryStringValue(HKLM, reg1, '', InstallPath) then
	begin
	Result := InstallPath + 'Lib\\site-packages' + '{#AppDir}';
  end else
  if RegQueryStringValue(HKCU, reg1, '', InstallPath) then
	begin
	Result := InstallPath + 'Lib\\site-packages' + '{#AppDir}';
  end else
  if RegQueryStringValue(HKLM, reg2, '', InstallPath) then
	begin
	Result := InstallPath + 'Lib\\site-packages' + '{#AppDir}';
  end else
	begin
	MsgBox('Could not find Python',mbError,MB_OK);
	ExitProcess(1);
   end
end;'''
		script.write(newl + code + newl)
		print 'Successfully wrote', self.scriptname